/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define CMK 1
#define NAV 2
#define SYM 3
#define NUM 4

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <NUM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        default_layer {
            /*
            &kp Q      | &kp W | &kp E | &kp R   | &kp T   |  | &kp Y    | &kp U   | &kp I    | &kp O   | &kp P
            &kp A      | &kp S | &kp D | &kp F   | &kp G   |  | &kp H    | &kp J   | &kp K    | &kp L   | &kp SEMI
            &mt LALT Z | &kp X | &kp C | &kp V   | &kp B   |  | &kp N    | &kp M   | &kp CMMA | &kp DOT | &kp SLASH
                       |       |       | &mo NAV | &kp SPC |  | &kp LSFT | &mo SYM |          |         |
            */
            bindings = <
            &kp Q       &kp W  &kp E  &kp R    &kp T      &kp Y     &kp U    &kp I     &kp O    &kp P
            &kp A       &kp S  &kp D  &kp F    &kp G      &kp H     &kp J    &kp K     &kp L    &kp SEMI
            &mt LALT Z  &kp X  &kp C  &kp V    &kp B      &kp N     &kp M    &kp CMMA  &kp DOT  &kp SLASH
                                      &mo NAV  &kp SPC    &kp LSFT  &mo SYM                    
            >;
        };

        colemak_layer {
            /*
            &kp Q      | &kp W | &kp F | &kp P   | &kp B   |  | &kp J    | &kp L   | &kp U    | &kp Y   | &kp SEMI
            &kp A      | &kp R | &kp S | &kp T   | &kp G   |  | &kp M    | &kp N   | &kp E    | &kp I   | &kp O
            &mt LALT X | &kp C | &kp D | &kp V   | &kp Z   |  | &kp K    | &kp H   | &kp CMMA | &kp DOT | &kp SLASH
                       |       |       | &mo NAV | &kp SPC |  | &kp LSFT | &mo SYM |          |         |
            */
            bindings = <
            &kp Q       &kp W  &kp F  &kp P    &kp B      &kp J     &kp L    &kp U     &kp Y    &kp SEMI
            &kp A       &kp R  &kp S  &kp T    &kp G      &kp M     &kp N    &kp E     &kp I    &kp O
            &mt LALT X  &kp C  &kp D  &kp V    &kp Z      &kp K     &kp H    &kp CMMA  &kp DOT  &kp SLASH
                                      &mo NAV  &kp SPC    &kp LSFT  &mo SYM                    
            >;
        };

        nav_layer {
            /*
            &kp ESC      | &kp TAB  | &kp RC(RS(TAB)) | &kp RC(TAB) | &kp C_VOL_UP |  | &kp BSPC  | &none     | &none     | &none     | &kp DEL
            &sk LCTRL    | &sk LGUI | &sk LALT        | &sk LSHIFT  | &kp C_VOL_DN |  | &kp LEFT  | &kp DOWN  | &kp UP    | &kp RIGHT | &none
            &kp LC(SPC)  | &none    | &none           | &none       | &kp C_MUTE   |  | &kp HOME  | &kp PG_DN | &kp PG_UP | &kp END   | &none
                         |          |                 | &trans      | &trans       |  | &kp ENTER | &trans    |           |           |
            */
        bindings = <
            &kp ESC       &kp TAB   &kp RC(RS(TAB))  &kp RC(TAB)  &kp C_VOL_UP    &kp BSPC   &none      &none      &none      &kp DEL
            &sk LCTRL     &sk LGUI  &sk LALT         &sk LSHIFT   &kp C_VOL_DN    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
            &kp LC(SPC)   &none     &none            &none        &kp C_MUTE      &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &none
                                                     &trans       &trans          &kp ENTER  &trans                          
        };
        
        right_layer {
        bindings = <
        &kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT                &kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
        &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN             &kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
        &kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH                &kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
                      &mo 3 &kp LCTL                  &kp SPC  &mo 2 
        >;
        };    
        
        tri_layer {
        bindings = <
        &kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5             &trans &trans   &trans   &trans  &trans
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                          &trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
        &bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7                   &trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
                     &trans &trans                      &trans &trans 
        >;
        };    
        
    };
};
